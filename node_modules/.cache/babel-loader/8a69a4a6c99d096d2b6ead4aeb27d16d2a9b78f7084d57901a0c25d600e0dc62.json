{"ast":null,"code":"const STORAGE_KEY = 'alpine_sales_data';\n\n/**\n * Save invoice data to session storage\n */\nexport function saveInvoiceToSession(invoice) {\n  try {\n    const existingData = getSessionData();\n    const updatedInvoices = [...existingData.invoices, invoice];\n    const sessionData = {\n      invoices: updatedInvoices,\n      customerProgressions: existingData.customerProgressions\n    };\n    sessionStorage.setItem(STORAGE_KEY, JSON.stringify(sessionData));\n  } catch (error) {\n    console.error('Error saving invoice to session storage:', error);\n  }\n}\n\n/**\n * Remove invoice from session storage\n */\nexport function removeInvoiceFromSession(invoiceId) {\n  try {\n    const existingData = getSessionData();\n    const updatedInvoices = existingData.invoices.filter(invoice => invoice.id !== invoiceId);\n    const sessionData = {\n      invoices: updatedInvoices,\n      customerProgressions: existingData.customerProgressions\n    };\n    sessionStorage.setItem(STORAGE_KEY, JSON.stringify(sessionData));\n  } catch (error) {\n    console.error('Error removing invoice from session storage:', error);\n  }\n}\n\n/**\n * Get all invoice data from session storage\n */\nexport function getSessionData() {\n  try {\n    const stored = sessionStorage.getItem(STORAGE_KEY);\n    if (stored) {\n      return JSON.parse(stored);\n    }\n  } catch (error) {\n    console.error('Error reading from session storage:', error);\n  }\n  return {\n    invoices: [],\n    customerProgressions: {}\n  };\n}\n\n/**\n * Get all Alpine sales records from all stored invoices\n */\nexport function getAllAlpineRecords() {\n  const sessionData = getSessionData();\n  return sessionData.invoices.flatMap(invoice => invoice.data.records);\n}\n\n/**\n * Get customer progressions from session storage\n */\nexport function getCustomerProgressions() {\n  const sessionData = getSessionData();\n  const progressions = new Map();\n  Object.entries(sessionData.customerProgressions).forEach(([customer, analysis]) => {\n    progressions.set(customer, analysis);\n  });\n  return progressions;\n}\n\n/**\n * Save customer progressions to session storage\n */\nexport function saveCustomerProgressions(progressions) {\n  try {\n    const existingData = getSessionData();\n    const progressionsObject = {};\n    progressions.forEach((analysis, customer) => {\n      progressionsObject[customer] = analysis;\n    });\n    const sessionData = {\n      invoices: existingData.invoices,\n      customerProgressions: progressionsObject\n    };\n    sessionStorage.setItem(STORAGE_KEY, JSON.stringify(sessionData));\n  } catch (error) {\n    console.error('Error saving customer progressions to session storage:', error);\n  }\n}\n\n/**\n * Clear all session storage data\n */\nexport function clearSessionData() {\n  try {\n    sessionStorage.removeItem(STORAGE_KEY);\n  } catch (error) {\n    console.error('Error clearing session storage:', error);\n  }\n}\n\n/**\n * Get unique periods from all stored invoices\n */\nexport function getUniquePeriods() {\n  const sessionData = getSessionData();\n  const periods = new Set();\n  sessionData.invoices.forEach(invoice => {\n    invoice.data.metadata.periods.forEach(period => periods.add(period));\n  });\n  return Array.from(periods).sort();\n}\n\n/**\n * Get unique customers from all stored invoices\n */\nexport function getUniqueCustomers() {\n  const sessionData = getSessionData();\n  const customers = new Set();\n  sessionData.invoices.forEach(invoice => {\n    invoice.data.metadata.customers.forEach(customer => customers.add(customer));\n  });\n  return Array.from(customers).sort();\n}\n\n/**\n * Get unique products from all stored invoices\n */\nexport function getUniqueProducts() {\n  const sessionData = getSessionData();\n  const products = new Set();\n  sessionData.invoices.forEach(invoice => {\n    invoice.data.metadata.products.forEach(product => products.add(product));\n  });\n  return Array.from(products).sort();\n}","map":{"version":3,"names":["STORAGE_KEY","saveInvoiceToSession","invoice","existingData","getSessionData","updatedInvoices","invoices","sessionData","customerProgressions","sessionStorage","setItem","JSON","stringify","error","console","removeInvoiceFromSession","invoiceId","filter","id","stored","getItem","parse","getAllAlpineRecords","flatMap","data","records","getCustomerProgressions","progressions","Map","Object","entries","forEach","customer","analysis","set","saveCustomerProgressions","progressionsObject","clearSessionData","removeItem","getUniquePeriods","periods","Set","metadata","period","add","Array","from","sort","getUniqueCustomers","customers","getUniqueProducts","products","product"],"sources":["/Users/isaachirsch/Desktop/GalantCo/SalesTracker/src/utils/sessionStorage.ts"],"sourcesContent":["import { AlpineSalesRecord, ParsedAlpineData, CustomerProgressAnalysis } from './alpineParser';\n\nexport interface StoredInvoice {\n  id: string;\n  fileName: string;\n  period: string;\n  uploadDate: string;\n  data: ParsedAlpineData;\n}\n\nexport interface SessionStorageData {\n  invoices: StoredInvoice[];\n  customerProgressions: Record<string, CustomerProgressAnalysis>;\n}\n\nconst STORAGE_KEY = 'alpine_sales_data';\n\n/**\n * Save invoice data to session storage\n */\nexport function saveInvoiceToSession(invoice: StoredInvoice): void {\n  try {\n    const existingData = getSessionData();\n    const updatedInvoices = [...existingData.invoices, invoice];\n    \n    const sessionData: SessionStorageData = {\n      invoices: updatedInvoices,\n      customerProgressions: existingData.customerProgressions\n    };\n    \n    sessionStorage.setItem(STORAGE_KEY, JSON.stringify(sessionData));\n  } catch (error) {\n    console.error('Error saving invoice to session storage:', error);\n  }\n}\n\n/**\n * Remove invoice from session storage\n */\nexport function removeInvoiceFromSession(invoiceId: string): void {\n  try {\n    const existingData = getSessionData();\n    const updatedInvoices = existingData.invoices.filter(invoice => invoice.id !== invoiceId);\n    \n    const sessionData: SessionStorageData = {\n      invoices: updatedInvoices,\n      customerProgressions: existingData.customerProgressions\n    };\n    \n    sessionStorage.setItem(STORAGE_KEY, JSON.stringify(sessionData));\n  } catch (error) {\n    console.error('Error removing invoice from session storage:', error);\n  }\n}\n\n/**\n * Get all invoice data from session storage\n */\nexport function getSessionData(): SessionStorageData {\n  try {\n    const stored = sessionStorage.getItem(STORAGE_KEY);\n    if (stored) {\n      return JSON.parse(stored);\n    }\n  } catch (error) {\n    console.error('Error reading from session storage:', error);\n  }\n  \n  return {\n    invoices: [],\n    customerProgressions: {}\n  };\n}\n\n/**\n * Get all Alpine sales records from all stored invoices\n */\nexport function getAllAlpineRecords(): AlpineSalesRecord[] {\n  const sessionData = getSessionData();\n  return sessionData.invoices.flatMap(invoice => invoice.data.records);\n}\n\n/**\n * Get customer progressions from session storage\n */\nexport function getCustomerProgressions(): Map<string, CustomerProgressAnalysis> {\n  const sessionData = getSessionData();\n  const progressions = new Map<string, CustomerProgressAnalysis>();\n  \n  Object.entries(sessionData.customerProgressions).forEach(([customer, analysis]) => {\n    progressions.set(customer, analysis);\n  });\n  \n  return progressions;\n}\n\n/**\n * Save customer progressions to session storage\n */\nexport function saveCustomerProgressions(progressions: Map<string, CustomerProgressAnalysis>): void {\n  try {\n    const existingData = getSessionData();\n    const progressionsObject: Record<string, CustomerProgressAnalysis> = {};\n    \n    progressions.forEach((analysis, customer) => {\n      progressionsObject[customer] = analysis;\n    });\n    \n    const sessionData: SessionStorageData = {\n      invoices: existingData.invoices,\n      customerProgressions: progressionsObject\n    };\n    \n    sessionStorage.setItem(STORAGE_KEY, JSON.stringify(sessionData));\n  } catch (error) {\n    console.error('Error saving customer progressions to session storage:', error);\n  }\n}\n\n/**\n * Clear all session storage data\n */\nexport function clearSessionData(): void {\n  try {\n    sessionStorage.removeItem(STORAGE_KEY);\n  } catch (error) {\n    console.error('Error clearing session storage:', error);\n  }\n}\n\n/**\n * Get unique periods from all stored invoices\n */\nexport function getUniquePeriods(): string[] {\n  const sessionData = getSessionData();\n  const periods = new Set<string>();\n  \n  sessionData.invoices.forEach(invoice => {\n    invoice.data.metadata.periods.forEach(period => periods.add(period));\n  });\n  \n  return Array.from(periods).sort();\n}\n\n/**\n * Get unique customers from all stored invoices\n */\nexport function getUniqueCustomers(): string[] {\n  const sessionData = getSessionData();\n  const customers = new Set<string>();\n  \n  sessionData.invoices.forEach(invoice => {\n    invoice.data.metadata.customers.forEach(customer => customers.add(customer));\n  });\n  \n  return Array.from(customers).sort();\n}\n\n/**\n * Get unique products from all stored invoices\n */\nexport function getUniqueProducts(): string[] {\n  const sessionData = getSessionData();\n  const products = new Set<string>();\n  \n  sessionData.invoices.forEach(invoice => {\n    invoice.data.metadata.products.forEach(product => products.add(product));\n  });\n  \n  return Array.from(products).sort();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}